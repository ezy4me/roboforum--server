// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODELS

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  email       String       @unique
  password    String
  role        Role         @relation(fields: [roleId], references: [id])
  roleId      Int
  token       Token[]
  userProfile UserProfile?

  project            Project[]
  discussion         Discussion[]
  favoriteProject    FavoriteProject[]
  projectComment     ProjectComment[]
  favoriteDiscussion FavoriteDiscussion[]
  discussionComment  DiscussionComment[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  userAgent String
}

model UserProfile {
  id       Int    @id @default(autoincrement())
  name     String
  bio      String
  company  String
  location String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  userSocials UserSocials[]
}

model UserSocials {
  id   Int    @id @default(autoincrement())
  link String

  socialsType   SocialsType @relation(fields: [socialsTypeId], references: [id])
  socialsTypeId Int

  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId Int
}

model SocialsType {
  id   Int    @id @default(autoincrement())
  type String

  userSocials UserSocials[]
}

// PROJECT MODELS

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  projectFiles ProjectFiles[]

  projectType   ProjectType @relation(fields: [projectTypeId], references: [id])
  projectTypeId Int

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  favoriteProject FavoriteProject[]
  projectComment  ProjectComment[]
}

model ProjectType {
  id   Int    @id @default(autoincrement())
  type String

  project Project[]
}

model ProjectFiles {
  id   Int    @id @default(autoincrement())
  file String

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model FavoriteProject {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model ProjectComment {
  id      Int    @id @default(autoincrement())
  comment String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

// DISCUSSIONS MODELS

model Discussion {
  id          Int      @id @default(autoincrement())
  title       String
  descroption String
  date        DateTime

  discussionFiles DiscussionFiles[]

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  favoriteDiscussion FavoriteDiscussion[]
  discussionComment  DiscussionComment[]
}

model DiscussionFiles {
  id   Int    @id @default(autoincrement())
  file String

  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId Int
}

model FavoriteDiscussion {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId Int
}

model DiscussionComment {
  id      Int    @id @default(autoincrement())
  comment String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId Int
}
